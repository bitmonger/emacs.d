#+TITLE: Bradley Wright's Emacs Configuration
#+OPTIONS: toc:2

* Conventions

Functions and variables defined exclusively for my use are prefixed with my
initials and a slash =bw/= to namespace them.

* Setup

Emacs looks in [[https://www.gnu.org/software/emacs/manual/html_node/eintr/Loading-Files.html][load-path]] for Emacs lisp files. =require= and other loading
constructs use this when looking for implicit names.

First we define a convenience function =bw/add-to-load-path= that adds the
passed in directory to =load-path=:

#+BEGIN_SRC emacs-lisp
  (defun bw/add-to-load-path (dir)
    "Adds `dir` to load-path"
    (add-to-list 'load-path dir))
#+END_SRC

and a convenience function for making a proper path out of two strings:

#+begin_src emacs-lisp
  (defun bw/join-dirs (prefix suffix)
    "Joins `prefix` and `suffix` into a directory"
    (file-name-as-directory (concat prefix suffix)))
#+end_src

** Base load path

Define a base directory =bw/dotfiles-dir= that's relative to the currently
loading file (this file). This means if I deliberately start Emacs with a file
loaded:

#+BEGIN_SRC
$ emacs -q -l ~/src/emacs/init.el
#+END_SRC

then =bw/dotfiles-dir= will be =~/src/emacs=.

#+BEGIN_SRC emacs-lisp
  (defconst bw/dotfiles-dir
    (file-name-directory
     (or (buffer-file-name) load-file-name))
    "Base path for customised Emacs configuration")
#+END_SRC

We also add it to =load-path=:

#+BEGIN_SRC emacs-lisp
  (bw/add-to-load-path bw/dotfiles-dir)
#+END_SRC

This variable is important because all other directories I load things from are
relative to it, which means my Emacs config doesn't need to live in
=user-emacs-directory=.

** Temporary directory

Emacs has many packages which need to store state in files. Generally these are
in =~= or =user-emacs-directory= - since my entire =~/.emacs.d= is versioned,
I'd rather all temporary files were stored in a known place, =bw/tmp-local-dir=.
This directory is created if it doesn't exist.

#+begin_src emacs-lisp
  (make-directory
   (setq bw/tmp-local-dir
         (bw/join-dirs bw/dotfiles-dir ".tmp")) t)
#+end_src

* Client/server

Emacs has a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server][client/server]] model for editing. The client is invoked via [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Invoking-emacsclient.html][the
=emacsclient= command]]. More information on configuration is available on the
[[http://www.emacswiki.org/emacs/EmacsClient][EmacsWiki EmacsClient page]].

We make sure the server is running, additionally guarded to check if the version
of Emacs we're using supports the server package:

#+begin_src emacs-lisp
  (when (require 'server nil t)
    (unless (server-running-p)
      (server-start)))
#+end_src

* Editing defaults

Emacs comes with a collection of strange defaults. See [[https://github.com/magnars/.emacs.d/blob/master/sane-defaults.el][Magnar Sveen's
=sane-defaults.el= file]] for some commentary.

** Line widths and wrapping

The default wrap width (known as [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Filling.html][filling]]) for Emacs is 70 characters. Modern
conventions state that 80 characters is the standard:

#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src

I don't type double-space sentences, so make sure that Emacs doesn't look for
double-spaces after periods to fill paragraphs correctly:

#+begin_src emacs-lisp
  (setq-default sentence-end-double-space nil)
#+end_src

** Trailing whitespace

Most UNIX tools work best when there's a trailing newline on all files. Enable
that option:

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

I don't want to leave trailing whitespace in files I touch, so set up a hook
that automatically deletes trailing whitespace after every line when saving a
file:

#+begin_src emacs-lisp
  (add-hook 'write-file-hooks 'delete-trailing-whitespace)
#+end_src

Emacs has lots of other options for [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Useless-Whitespace.html][managing superfluous whitespace]].

** Indentation

I don't use tabstops in files, and my default tab width is 4 characters.

It's worth noting that Emacs can override either of those on a per-file/mode
basis, so Makefiles, Ruby etc. will still get the correct indentation rules.

#+begin_src emacs-lisp
  (setq-default
   indent-tabs-mode nil
   tab-width 4)
#+end_src

*** Auto-indentation

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html][Electric indent mode]] was added in Emacs 24.1, and it enables automatic indentation when typing a newline. [[http://emacsredux.com/blog/2013/03/29/automatic-electric-indentation][More about electric indent mode on Emacs Redux]].

First we define convenience toggling functions we can use in a hook (or interactively):

#+begin_src emacs-lisp
  (defun bw/turn-on-electric-indent-mode ()
    "Turns on electric-indent-mode"
    (interactive)
    (electric-indent-mode 1))

  (defun bw/turn-off-electric-indent-mode ()
    "Turns off electric-indent-mode"
    (interactive)
    (electric-indent-mode -1))
#+end_src

then we enable it for [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Program-Modes.html][the generic abstract programming mode =prog-mode=,
introduced in Emacs 24.1]] ([[http://emacsredux.com/blog/2013/04/05/prog-mode-the-parent-of-all-programming-modes/][more about =prog-mode= on Emacs Redux]]):

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'bw/turn-on-electric-indent-mode)
#+end_src

** Encoding

I want to have [[http://en.wikipedia.org/wiki/UTF-8][UTF-8]] by default. [[http://www.masteringemacs.org/articles/2012/08/09/working-coding-systems-unicode-emacs/][Emacs unfortunately has a few settings that
govern encoding]], so we should set them all at once:

#+begin_src emacs-lisp
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

** Smart =beginning-of-line=

=C-a= is mapped to =beginning-of-line= by default, which moves point to position
0 on the current line. [[http://irreal.org/blog/?p=1946][The irreal blog suggests a smarter alternative]] that moves
the point to the first non-whitespace character first, and then position 0, with
extra presses toggling the position:

#+begin_src emacs-lisp
  (defadvice move-beginning-of-line (around smarter-bol activate)
    ;; Move to requested line if needed.
    (let ((arg (or (ad-get-arg 0) 1)))
      (when (/= arg 1)
        (forward-line (1- arg))))
    ;; Move to indentation on first call, then to actual BOL on second.
    (let ((pos (point)))
      (back-to-indentation)
      (when (= pos (point))
        ad-do-it)))
#+end_src

This functionality uses the Emacs concept of [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][advice]], which is a way of modifying
existing functions in-place without redefining the entire thing.

* Keyboard

** Modifier keys

- =C-= means =Control= in combination with another key, eg =C-x= means =Ctrl + x=
- =M-= means =Meta= in combination with another key. This is usually =Alt=, or
  =⌘= on OS X (by default). =Esc= also serves as =Meta= if it's not separately
  bound. On OS X I want to use left =⌥= for =Meta=, and leave right =⌥= alone:

#+BEGIN_SRC emacs-lisp
  (when (and (eq system-type 'darwin) (display-graphic-p))
    (setq ns-alternate-modifier 'meta)
    (setq ns-right-alternate-modifier nil))
#+END_SRC

- =s-= means [[http://en.wikipedia.org/wiki/Super_key_(keyboard_button)][super key]]. On OS X I want this to be =⌘=:

#+BEGIN_SRC emacs-lisp
  (when (and (eq system-type 'darwin) (display-graphic-p))
    (setq ns-command-modifier 'super))
#+END_SRC

- =H-= means [[http://en.wikipedia.org/wiki/Hyper_key][hyper key]]. On OS X I want this to be =fn=:

#+BEGIN_SRC emacs-lisp
  (when (and (eq system-type 'darwin) (display-graphic-p))
    (setq ns-function-modifier 'hyper))
#+END_SRC

** Basic remappings

The below are some remappings I got from [[https://sites.google.com/site/steveyegge2/effective-emacs][Steve Yegge's Effective Emacs]] article.
They're designed to map some slightly difficult but very common mappings to
things that are easier to type.

*** Invoke =M-x= without the Alt key

As per [[https://sites.google.com/site/steveyegge2/effective-emacs#item2][Yegge's Item 2]]. This unmaps the difficult =M-x= (usually =Alt+x=) to =C-x
m=, and then add a fat-finger combination of =C-x C-m=:

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-x m"))
  (global-unset-key (kbd "M-x"))
  (global-set-key (kbd "C-x m") 'execute-extended-command)
  (global-set-key (kbd "C-x C-m") 'execute-extended-command)
#+end_src

*** Prefer =backward-kill-word= over Backspace

As per [[https://sites.google.com/site/steveyegge2/effective-emacs#item3][Yegge's Item 3]]. This copies readline's =C-w= command to
=backward-kill-word=, remaps the command that used to live there
(=kill-region=), and then enables a fat-finger version of the new =kill=region=
mapping:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "C-x C-k") 'kill-region)
  (global-set-key (kbd "C-c C-k") 'kill-region)
#+end_src

*** Quick window switching

Usually one must type =C-x o= to switch between windows - make that quicker by
also mapping =M-o=:

#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src

*** Buffer management

Burying a buffer (removing it from the current window and sending it to the
bottom of the stack) is very common for dismissing buffers. Add a mapping for
it:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c y") 'bury-buffer)
#+end_src

Add a key combination to revert the current buffer (re-read the contents from
disk):

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c r") 'revert-buffer)
#+end_src

* Interface

** Remove chrome

To ensure that all scrollbars, toolbars etc. are turned off, we run this as
early as possible.

#+NAME: turn-off-chrome
#+BEGIN_SRC emacs-lisp
  (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode))
    (when (fboundp mode) (funcall mode -1)))
#+END_SRC

** Startup buffers

Turn off the startup screen, and always show =*scratch*=.

#+NAME: turn-off-startup
#+BEGIN_SRC emacs-lisp
  ;; inhibit startup screen
  (setq inhibit-startup-screen t
        ;; Show *scratch* on start
        initial-buffer-choice t)
#+END_SRC

** Font

I use [[http://levien.com/type/myfonts/inconsolata.html][Inconsolata]] as my default coding font. It's set to render at 18pt:

#+begin_src emacs-lisp
  (when (and
         (display-graphic-p)
         (find-font (font-spec :name "Inconsolata")))
    (set-frame-font "Inconsolata-18" t t))
#+end_src

** Syntax highlighting

Syntax highlighting in Emacs is called [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][font locking]]. It's enabled by
=font-lock-mode=. This turned on by default in modern Emacs systems, but it's
worth keeping around:

#+begin_src emacs-lisp
  (global-font-lock-mode t)
#+end_src

Emacs also supports multiple levels of complexity for highlighting. Setting this
value to =t= forces it to pick the maximum available (also the default):

#+begin_src emacs-lisp
  (setq font-lock-maximum-decoration t)
#+end_src

** Line and column numbers

Emacs doesn't display line numbers by the code by default. For that you want
[[http://www.emacswiki.org/emacs/LineNumbers#toc1][Linum mode]].

I want to display the current line number in the
[[http://www.emacswiki.org/emacs/ModeLine][mode line]], and also the current
column number:

#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

** Tooltips

Emacs convention is to show help and other inline documentation in the [[https://www.gnu.org/software/emacs/manual/html_node/eintr/message.html][message
area]]. Show help there instead of using an OS tooltip:

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (tooltip-mode -1))
#+end_src

** Dialogue boxes and windows

Just don't show them. Use native Emacs controls:

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq use-dialog-box nil))
#+end_src

Make the window title display the full path of the file I'm currently editing:

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq frame-title-format
          '((:eval (if (buffer-file-name)
                       (abbreviate-file-name (buffer-file-name))
                     "%b")))))
#+end_src

Aside: Emacs calls OS windows [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Frames.html#Frames][frames]] and divisions within frames [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Windows.html#Windows][windows]]. [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Titles.html][More
information on frame titles]].

** Cursor

On modern operating systems, a vertical bar is used as a cursor:

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq-default cursor-type 'bar))
#+end_src

Make the cursor blink (interestingly in Emacs 24.4+ the [[https://lists.gnu.org/archive/html/emacs-diffs/2013-07/msg00208.html][cursor automatically
stops blinking after a period to conserve CPU]]).

Make the cursor blink every second:

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq blink-cursor-interval 1.0)
    (blink-cursor-mode 1))
#+end_src

** Typing

Show the modifier combinations I just typed almost immediately:

#+begin_src emacs-lisp
  (setq echo-keystrokes 0.1)
#+end_src

Don't make me type =yes= or =no= to boolean interface questions:

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Bells

Don't make a sound when [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Beeping.html][ringing a bell]] - flash a visual bell instead:

#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

Override the =ring-bell-function= to conditionally ring the bell only when it's
not a valid quit case like hitting =esc= or =C-g=. Generally this means the bell
will only ring when there's actually an error raised somehow:

#+begin_src emacs-lisp
  (setq ring-bell-function
        (lambda ()
          "Only rings the bell if it's not a valid quit case, e.g
  keyboard-quit"
          (unless (memq this-command
                        '(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit))
            (ding))))
#+end_src

** Buffer naming

By default Emacs resolves conflicting buffer names by appending a number to
them. For instance, if I open =~/src/thing/init.el= and
=~/src/other-thing/init.el= they'll be named =init.el= and =init.el<2>=
respectively.

We can use [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html][Uniquify]] library to name them =thing/init.el= and
=other-thing/init.el=, which is much easier to make sense of.

#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src

* OS X specific configuration

Besides the keyboard configuration above, there are some other specific things I
do on OS X. On OS X =system-type= is the symbol =darwin=.

** Host name mangling

Typically OS X hosts are called things like =hostname.localconfig= or
=hostname.local=. Make Emacs report that without the extra suffix:

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq system-name (car (split-string system-name "\\."))))
#+end_src

** Spelling correction

[[https://www.gnu.org/software/ispell/][ispell]] isn't generally available on OS X. [[http://aspell.net][aspell]] is available via [[https://github.com/Homebrew/homebrew/blob/master/Library/Formula/aspell.rb][Homebrew]], so
let's use that if we can find it:

#+begin_src emacs-lisp
  (when (and (eq system-type 'darwin) (executable-find "aspell"))
      (setq ispell-program-name (executable-find "aspell")))
#+end_src

** dired fixes

OS X's bundled version of =ls= isn't the GNU one, so it doesn't support the
=--dired= flag. Emacs caters for that use case:

#+begin_src emacs-lisp
  (setq dired-use-ls-dired nil)
#+end_src

** sRGB display fixes

As of Emacs 24.4, [[http://lists.gnu.org/archive/html/emacs-devel/2013-12/msg00741.html][Emacs natively supports proper sRGB]] values on OS X:

#+begin_src emacs-lisp
  (setq ns-use-srgb-colorspace t)
#+end_src

If you're not using Emacs 24.4 this variable setting will have no effect. See
[[https://github.com/Homebrew/homebrew/blob/7446162e59fe548a0fde735d25b9913f8fa2ad4a/Library/Formula/emacs.rb#L10][Homebrew's Emacs recipe]] for details of how to get this behaviour in earlier
Emacs versions.

* Other modes

Emacs comes with hundreds of major and minor modes to do many many things. These
are the ones I commonly use and have configured.

First let's define a convenient macro that wraps typical =eval-after-load= in
such a way that we don't need to use =progn= to contain the callback logic. This
macro was gotten from [[https://github.com/purcell/emacs.d/blob/aa789c9745b13612c4fea6e638d81d8ebbfecdf8/init-utils.el#L1-L5][Steve Purcell's emacs.d repo]]:

#+begin_src emacs-lisp
  (defmacro after-load (feature &rest body)
    "After FEATURE is loaded, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,feature
       '(progn ,@body)))
#+end_src

** ido-mode

[[http://www.emacswiki.org/emacs/InteractivelyDoThings][ido-mode]] is a mode for narrowing candidates as you type. It has excellent
integration with buffer switching and finding files. [[http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/][Mastering Emacs has a good
guide to Ido]].

First we enable =ido-mode= globally and enable =ido-everywhere=, which enables
Ido for buffer and file reading:

#+begin_src emacs-lisp
  (after-load 'ido
    (ido-mode t)
    (ido-everywhere t))
#+end_src

Force Ido to [[http://stackoverflow.com/a/11341239/61435][ignore Dropbox cruft]]:

#+begin_src emacs-lisp
  (after-load 'ido
    (add-to-list 'ido-ignore-files "Icon\n"))
#+end_src

Configure Ido (see comments for more information):

#+begin_src emacs-lisp
  (after-load 'ido
    (setq
     ;; Speed up ido by using less candidates
     ido-max-prospects 10
     ;; Match arbitrary points in strings
     ido-enable-prefix nil
     ;; Match across entire string
     ido-enable-flex-matching t
     ;; Create a new buffer if there's no match candidate
     ido-create-new-buffer 'always
     ;; Don't try and guess if the string under point is a file
     ido-use-filename-at-point nil
     ;; case-insensitive matching
     ido-case-fold t
     ;; don't store old files as virtual buffers
     ido-use-virtual-buffers nil))
#+end_src

Finally load Ido:

#+begin_src emacs-lisp
  (require 'ido)
#+end_src

** bookmarks

Emacs has robust [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmarking functionality]]. It uses a file to persit the list of
bookmarks, so make sure that file is in my custom temporary directory:

#+begin_src emacs-lisp
  (after-load 'bookmark
    (setq bookmark-default-file (expand-file-name ".emacs.bmk" bw/tmp-local-dir)))
#+end_src

** eldoc-mode

[[http://www.emacswiki.org/emacs/ElDoc][eldoc-mode]] is a minor mode that displays context-sensitive help when editing
Emacs lisp (eg information about arity of functions). Enable that for
=emacs-lisp-mode=:

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+end_src

** python-mode

As of 24.2, Emacs ships with a [[http://www.emacswiki.org/emacs/PythonProgrammingInEmacs#toc1][robust Python mode]]. However, when navigating
=SnakeCase= words (eg class names), =forward-word= etc don't work correctly.

We can work around that using [[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Subword-Movement.html#Subword-Movement][subword-mode]]:

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook (lambda () (subword-mode 1)))
#+end_src

** ruby-mode

As of 24.4, Emacs comes with a much better [[http://www.masteringemacs.org/articles/2013/12/29/whats-new-in-emacs-24-4/][Ruby mode]]. However it doesn't come
with =subword-mode= enabled by default:

#+begin_src emacs-lisp
  (after-load 'ruby-mode
    (add-hook ruby-mode-hook (lambda () (subword-mode 1))))
#+end_src

** Hippie expand

[[http://www.emacswiki.org/emacs/HippieExpand][Hippie expand]] is a more feature complete completion engine than the default
[[http://www.emacswiki.org/emacs/DynamicAbbreviations][dabbrev]] engine.

First we customise the types of things it looks for:

#+begin_src emacs-lisp
  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-file-name-partially
          try-complete-file-name
          try-expand-all-abbrevs
          try-expand-list
          try-expand-line
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol))
#+end_src

Then we override =dabbrev-expand='s keybinding to use =hippie-expand= instead
(normally this is =M-/=):

#+begin_src emacs-lisp
  (define-key (current-global-map) [remap dabbrev-expand] 'hippie-expand)
#+end_src
